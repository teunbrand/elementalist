% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/style_multicolour.R
\name{multicolour}
\alias{multicolour}
\alias{element_line_multicolour}
\alias{element_rect_multicolour}
\alias{multicolour_geoms}
\title{Multicolour lines}
\usage{
multicolour()

element_line_multicolour(colour = rainbow(10), ...)

element_rect_multicolour(colour = rainbow(10), ...)

multicolour_geoms(
  fill = NULL,
  colour = rainbow(10),
  linewidth = NULL,
  linetype = NULL,
  color = NULL,
  lineend = NULL,
  sides = "tlbr",
  n = 50
)
}
\arguments{
\item{colour}{A \code{character} vector with colour names or hexadecimal
notation.}

\item{...}{Arguments passed to \code{element_*_seq()}.}

\item{fill}{Fill colour.}

\item{linewidth}{Line/border size in mm.}

\item{linetype}{Line type. An integer (0:8), a name (blank, solid,
dashed, dotted, dotdash, longdash, twodash), or a string with
an even number (up to eight) of hexadecimal digits which give the
lengths in consecutive positions in the string.}

\item{lineend}{Line end Line end style (round, butt, square)}

\item{sides}{A \code{character} of length one containing any of \code{"t"},
\code{"l"}, \code{"b"} and/or \code{"r"}. If these letters are present,
edges are drawn at the top (t), left (l), bottom (b) or right (r),
respectively. Including all these letters will draw all rectangle edges
(default), whereas including none of these letters will not draw edges.}

\item{n}{An \code{integer} of length one indicating how many points to
interpolate.}
}
\value{
For \code{multicolour()}, a \code{function}.

For \code{element_rect_multicolour()}, an \code{element_rect_seq}
  type list.

For \code{element_line_multicolour()}, an \code{element_line_seq}
  type list.

For \code{multicolour_geoms}, a partial \code{theme} object.
}
\description{
Interpolates lines and colour vectors, creating a gradient-like line. The
functions are used in the following way: \describe{
  \item{\code{multicolour()}}{is a function factory that produces a function
  that is subsequently used in elements to make lines multicolour.}
  \item{\code{element_rect_multicolour()}, \code{element_line_multicolour}}{
  are convenience wrappers around \code{element_*_seq()} that pass down the
  function generated by \code{multicolour()}.}
  \item{\code{multicolour_geoms()}}{is a convenience theme setter for the
  \code{elementalist.geom_rect} and \code{elementalist.geom_line} elements.}
}
}
\details{
The \code{multicolour} function is a function factory that produces
a function, that subsequently can be used to gradient-colour lines.

For the \code{element_rect_multicolour()} the gradient is applied to each
side separately.
}
\examples{
barplot <- ggplot(mpg, aes(class)) +
  geom_bar_theme() +
  geom_line_theme(stat = "count", aes(group = -1))

# Making multicolour geoms
barplot + multicolour_geoms(colour = c("#00E6FF",  "#2ABEFF",
                                       "#CF77F0", "#FD006A"))

# Making only line geoms multicolour
barplot + theme(elementalist.geom_line =
                  element_line_multicolour(c("magenta", "yellow")))

# Making only rect geoms multicolour
barplot + theme(elementalist.geom_rect = element_rect_multicolour(rainbow(50)))

# Let other theme elements be multicolour
barplot + theme(
  panel.grid.major.x =
    element_line_multicolour(colour = c("white", "yellow", "white")),
  panel.background = element_rect_multicolour(colour = rainbow(50))
)
}
\seealso{
Other theme styles: 
\code{\link{glow}()},
\code{\link{wiggle}()}
}
\concept{theme styles}
