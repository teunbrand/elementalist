% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_col_theme.R
\name{geom_col_theme}
\alias{geom_col_theme}
\alias{geom_bar_theme}
\alias{geom_histogram_theme}
\title{Thematic bars}
\usage{
geom_col_theme(
  mapping = NULL,
  data = NULL,
  position = "stack",
  ...,
  width = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  element = NULL
)

geom_bar_theme(
  mapping = NULL,
  data = NULL,
  stat = "count",
  position = "stack",
  ...,
  width = NULL,
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE,
  element = NULL
)

geom_histogram_theme(
  mapping = NULL,
  data = NULL,
  stat = "bin",
  position = "stack",
  ...,
  binwidth = NULL,
  bins = NULL,
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE,
  element = NULL
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{width}{Bar width. By default, set to 90\% of the resolution of the data.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{element}{An \code{element_rect} object, typically constructed with
\code{element_rect_*} functions. Will inherit from the
\code{elementalist.geom_rect} theme element. When \code{NULL} this theme
element is taken directly.}

\item{stat}{Override the default connection between \code{geom_bar()} and
\code{stat_count()}.}

\item{orientation}{The orientation of the layer. The default (\code{NA})
automatically determines the orientation from the aesthetic mapping. In the
rare event that this fails it can be given explicitly by setting \code{orientation}
to either \code{"x"} or \code{"y"}. See the \emph{Orientation} section for more detail.}

\item{binwidth}{The width of the bins. Can be specified as a numeric value
or as a function that calculates width from unscaled x. Here, "unscaled x"
refers to the original x values in the data, before application of any
scale transformation. When specifying a function along with a grouping
structure, the function will be called once per group.
The default is to use the number of bins in \code{bins},
covering the range of the data. You should always override
this value, exploring multiple widths to find the best to illustrate the
stories in your data.

The bin width of a date variable is the number of days in each time; the
bin width of a time variable is the number of seconds.}

\item{bins}{Number of bins. Overridden by \code{binwidth}. Defaults to 30.}
}
\value{
A \code{Layer} object that can be added to a plot.
}
\description{
These geoms closely follow the \code{geom_col()} and \code{geom_tile()} but
take defaults from the theme and are drawn through theme elements. They use
the \code{elementalist.geom_rect} theme element.
}
\section{Aesthetics}{

\code{geom_col_theme()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
  \item \strong{\code{x}}
  \item \strong{\code{y}}
  \item \code{alpha}
  \item \code{colour}
  \item \code{fill}
  \item \code{group}
  \item \code{linetype}
  \item \code{size}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.
}

\examples{
df <- data.frame(
  category = LETTERS[1:5],
  value = c(10, 5, 2, 8, 9)
)

# Styling through the partial theme setters
ggplot(df, aes(category, value)) +
  geom_col_theme() +
  wiggling_geoms()

# Styling through the `element` argument
ggplot(mpg, aes(class)) +
  geom_bar_theme(aes(colour = class),
                 element = element_rect_glow())

# Styling through the main theme
ggplot(diamonds, aes(log10(carat))) +
  geom_histogram_theme(bins = 20) +
  theme(
    elementalist.geom_rect = element_rect_multicolour()
  )
}
